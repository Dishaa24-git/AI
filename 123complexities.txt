Here’s a clear breakdown of **time and space complexities** for the listed algorithms:

---

### **1. DFS (Depth-First Search)**

* **Time Complexity:** O(V + E)
* **Space Complexity:** O(V) (due to recursion stack or visited array)

  * *V: number of vertices, E: number of edges*

---

### **2. BFS (Breadth-First Search)**

* **Time Complexity:** O(V + E)
* **Space Complexity:** O(V) (queue + visited array)

---

### **3. A* Search*\*

* **Time Complexity:** O(E) in the best-case (depends on heuristic), 

  * Worst-case: exponential in size of state space
* **Space Complexity:** O(V) or more (due to open and closed sets)

  * *Highly dependent on heuristic and implementation*

---
✅ A* Algorithm for 8-Puzzle
Time Complexity:
Worst case: O(b^d)

b = branching factor (≈ 2.13 for 8-puzzle)

d = depth of the solution (number of moves to goal)

In practice, depends on the heuristic:

Manhattan Distance or Misplaced Tiles are common.

Good heuristics greatly reduce the number of expanded nodes.

The number of possible states is 9! = 362,880, so in the worst case, A* may explore a large portion of this.

 Space Complexity:
O(b^d), same as time in worst case (since it stores all generated nodes in memory: open and closed lists).


### **4. Prim’s Algorithm**

* **Time Complexity:**

  * Using Min-Heap + Adjacency List: O(E log V)
  * Using Adjacency Matrix: O(V²)  //without heap
* **Space Complexity:** O(V + E)

---

### **5. Kruskal’s Algorithm**

* **Time Complexity:** O(E log E) or O(E log V)

  * (due to edge sorting and union-find)
* **Space Complexity:** O(E + V)

---

### **6. Selection Sort**

* **Time Complexity:** O(n²)
* **Space Complexity:** O(1) (in-place sorting)

---

### **7. N-Queens Problem**

* **Time Complexity:** O(N!) (worst case, for brute-force backtracking)
* **Space Complexity:** O(N) (for storing positions per row or recursion stack)

---

Let me know if you want complexity comparisons in a table or need explanation for any of these.


kruskal:
Number of vertices: 4
Number of edges: 5
Edges:
0 1 10
0 2 6
0 3 5
1 3 15
2 3 4

